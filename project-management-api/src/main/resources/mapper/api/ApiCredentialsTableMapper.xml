<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaofei.management.api.mapper.ApiCredentialsTableMapper">
    
    <resultMap type="ApiCredentialsTable" id="ApiCredentialsTableResult">
        <result property="id"    column="id"    />
        <result property="userId"    column="user_id"    />
        <result property="accessKey"    column="access_key"    />
        <result property="secretKey"    column="secret_key"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
        <result property="isDelete"    column="is_delete"    />
    </resultMap>

    <sql id="selectApiCredentialsTableVo">
        select id,user_id, access_key, secret_key, create_time, update_time, is_delete from api_credentials_table
    </sql>

    <select id="selectApiCredentialsTableList" parameterType="ApiCredentialsTable" resultMap="ApiCredentialsTableResult">
        <include refid="selectApiCredentialsTableVo"/>
        WHERE user_id = #{userId}
    </select>
    
    <select id="selectApiCredentialsTableById" parameterType="Long" resultMap="ApiCredentialsTableResult">
        <include refid="selectApiCredentialsTableVo"/>
        WHERE id = #{id}
        AND user_id = #{userId}
    </select>

    <!--查询凭据信息-->
    <select id="selectApiCredentialsTableByAccessKey" resultMap="ApiCredentialsTableResult">
        <include refid="selectApiCredentialsTableVo"/>
        WHERE access_key = #{accessKey}
    </select>

    <insert id="insertApiCredentialsTable" parameterType="ApiCredentialsTable" useGeneratedKeys="true" keyProperty="id">
        insert into api_credentials_table
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="accessKey != null">access_key,</if>
            <if test="secretKey != null">secret_key,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="isDelete != null">is_delete,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="accessKey != null">#{accessKey},</if>
            <if test="secretKey != null">#{secretKey},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="isDelete != null">#{isDelete},</if>
         </trim>
    </insert>

    <update id="updateApiCredentialsTable" parameterType="ApiCredentialsTable">
        update api_credentials_table
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="accessKey != null">access_key = #{accessKey},</if>
            <if test="secretKey != null">secret_key = #{secretKey},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="isDelete != null">is_delete = #{isDelete},</if>
        </trim>
        where id = #{id}
        AND user_id = #{userId}
    </update>

    <delete id="deleteApiCredentialsTableById" parameterType="Long">
        delete
        from api_credentials_table
        where id = #{id}
          AND user_id = #{userId}
    </delete>

    <delete id="deleteApiCredentialsTableByIds" parameterType="String">
        delete from api_credentials_table where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND user_id = #{userId}
    </delete>
</mapper>